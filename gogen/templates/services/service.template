/**
    Generated by: silvera
    Date: {{timestamp}}
*/
{%- set service_ref = service_name + 'Service' + ' *' + service_name|firstupper + 'Service' %}
package services

import (
	"{{service_name}}/models"
	"{{service_name}}/repositories"
)

type {{service_name|firstupper}}Service struct {
	{%-for typedef, id_datatype, _ in typedefs %}
	{{typedef|lower}}Repository *repositories.{{typedef|firstupper}}Repository
	{%- endfor %}
}

func New{{service_name|firstupper}}Service({%-for typedef, id_datatype, _ in typedefs -%}
							{{typedef|lower}}Repository *repositories.{{typedef|firstupper}}Repository,
							  {% endfor -%}
							) *{{service_name|firstupper}}Service {
	return &{{service_name|firstupper}}Service{{'{'}}{%-for typedef, id_datatype, _ in typedefs -%}
								{{typedef|lower}}Repository: {{typedef|lower}}Repository
								{%- endfor -%}
								{{'}'}}
}

// Auto-generated CRUD methods
{% for typedef, id_datatype, _ in typedefs -%}
{%- set id_datatype = id_datatype|converttype -%}
func ({{service_ref}}) Create({{typedef|firstlower}} *models.{{typedef|firstupper}}) interface{} {
	retVal,_ := {{service_name}}Service.{{typedef|firstlower}}Repository.Create({{typedef|firstlower}})
	return retVal
}

func ({{service_ref}}) Update({{typedef|firstlower}} *models.{{typedef|firstupper}}) interface{} {
	retVal,_ := {{service_name}}Service.{{typedef|firstlower}}Repository.Update({{typedef|firstlower}})
	return retVal
}

func ({{service_ref}}) Delete({{typedef|firstlower}}ID {{id_datatype|converttype}}) {
	err := {{service_name}}Service.{{typedef|firstlower}}Repository.Delete({{typedef|firstlower}}ID)
	if err != nil { panic(err) }
}
{% endfor %}


{%- for function in functions %}
func ({{service_ref}}) {{function.name|firstupper}}() {
	 /*
            TODO: Implement this function!!!
     */
}
{% endfor %}