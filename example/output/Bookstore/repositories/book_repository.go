/**
    Generated by: silvera
    Date: 2022-09-20 23:08:02
*/
package repositories

import (
	"context"
	"bookstore/models"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

type BookRepository struct {
	*mongo.Collection
	context.Context
}

func NewBookRepository(database *mongo.Database) *BookRepository {
	return &BookRepository{
	        Collection: database.Collection("books"),
	        }
}

func (bookRepository *BookRepository) Create(book *models.Book) (interface{}, error) {
	response, err := bookRepository.Collection.InsertOne(bookRepository.Context, book)
	return response, err
}

func (bookRepository *BookRepository) Update(book *models.Book) (interface{}, error) {
	response, err := bookRepository.Collection.ReplaceOne(bookRepository.Context, bson.M{"_id": book.ID}, book)
	return response, err
}

func (bookRepository *BookRepository) Delete(bookID string) error {
	_, err := bookRepository.Collection.DeleteOne(bookRepository.Context, bson.M{"_id": bookID})
	return err
}

func (bookRepository *BookRepository) GetOne(bookID string) (interface{}, error) {
    var result bson.M
	err := bookRepository.Collection.FindOne(bookRepository.Context, bson.M{"_id": bookID}).Decode(&result)
	return result, err
}

func (bookRepository *BookRepository) GetAll() *[]models.Book {
	cursor, _ := bookRepository.Collection.Find(bookRepository.Context, bson.M{})
	var books []models.Book
	_ = cursor.All(bookRepository.Context, &books)
	return &books
}